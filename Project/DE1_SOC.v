
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC(

	//////////// ADC //////////
	inout 		          		ADC_CS_N,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// IR //////////
	input 		          		IRDA_RXD,
	output		          		IRDA_TXD,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		     [7:0]		VGA_B,
	output		          		VGA_BLANK_N,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_1
);
//================================================//
//										                    //
//	            REG/WIRE declarations	           //
//										                    //
//================================================//
wire 		[11:0]	ADC_vin0,ADC_vin1;
wire 					clock_2048,w_10000Hz,w_10Hz;
wire		[11:0]	w_ADC_channel;
wire		[12:0]	w_Test,w_Test2;
wire		[3:0]		wHex0,wHex1,wHex2;

//================================================//
//										                    //
//	                Main Control	                 //
//										                    //
//================================================//
PWM_IGBT_DRIVER MAINCONTROL(
	.V_feedback(ADC_vin0), //不需要乘以十
	.V_target(/*20*4095/50*/SW[6:1]*4095/50),	// V of welding machine * 4095 / 50
	.clock_50Min(CLOCK_50),
	.reset_n(KEY[0]),
	.PWM(GPIO_0[4:3]),
	.Test_pin(w_Test),
	.Test_pin2(w_Test2),
	.Switch(/*SW[9:0]*/)
);
//================================================//
// 															  //
//		         HEX Display Module                 //
//																  //
//================================================//
ADC_SCALE_DISPLAY V_target( //0~4095(12bits)->0~5 votalge Display
	.Clock_in(w_10Hz), 
	.reset_n(KEY[0]), 
	.bindata(w_ADC_channel),
	.dig_5(wHex2),
	.dig_4(wHex1),
	.dig_3(wHex0), 
	.dig_2(), 
	.dig_1(), 
	.dig_0()
);
Divisor ForDisplay(			
	.clock_in(CLOCK_50),	
	.iHz_in(10),				//顯示頻率  x Hz
	.reset_n(KEY[0]),
	.clock_div(w_10Hz)
	);
HEX_MODULE AllHex(
	.Num0(wHex0),
	.Num1(wHex1),
	.Num2(wHex2),
	.Num3(),
	.Num4(),
	.Num5(),
	.Hex0(HEX0),
	.Hex1(HEX1),
	.Hex2(HEX2),
	.Hex3(HEX3),
	.Hex4(HEX4),
	.Hex5(HEX5),
	.data(w_Test2)
);
assign LEDR[9:0] = w_Test[12:3];
//================================================//
//										                    //
//	                 ADC MODULE	                 //
//										                    //
//================================================//
AD7928 AnalogDigitalConverter(
	.Clock_in(clock_2048),
	.rstn(KEY[0]),
	.ad7928_sclk(ADC_SCLK),
	.ad7928_din(ADC_DIN),
	.ad7928_csn(ADC_CS_N),
	.ad7928_dout(ADC_DOUT), 
	.vin0(ADC_vin0),
	.vin1(ADC_vin1)
//	.vin2(),
//	.vin3(),
//	.vin4(),
//	.vin5(),
//	.vin6(),
//	.vin7()
);
Divisor ForADC(
	.clock_in(CLOCK_50),
	.iHz_in(10000),			// 需配合PID輸出頻率-> 致少大於PID輸出頻率x100
	.reset_n(KEY[0]),
	.clock_div(w_10000Hz)
	);
PLL ForADC_20_48M(
	.refclk   (CLOCK_50),   //  refclk.clk
	.rst      (!KEY[0]),    //  reset.reset
	.outclk_0 (clock_2048), //  outclk0.clk
);
//================================================//
//										                    //
//	           SWITCH ADC CHANNEL MODULE	        //
//										                    //
//================================================//

SWITCH_ADC_CHANNEL_MODULE CH0or1(	
	.Switch(SW[0]),
	.Channel0(ADC_vin0),
	.Channel1(ADC_vin1),
	.oSelectChannel(w_ADC_channel)
);
endmodule